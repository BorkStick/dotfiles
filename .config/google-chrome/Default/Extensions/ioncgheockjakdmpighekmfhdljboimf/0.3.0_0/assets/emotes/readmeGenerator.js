const fs = require('fs');
const dictionary = require('./dictionary.json');

let MD = `\
<!-- DO NOT EDIT THIS FILE DIRECTLY! -->
<!-- Use readmeGenerator.js to create README.md -->

# Emote Dictionary

These are the custom emotes included in BetterYTG, the majority of them have been sourced from [BetterTTV](https://nightdev.com/betterttv/) and [FrankerFaceZ](https://www.frankerfacez.com/) - similar extensions, though instead for Twitch.TV.

If you would like a new emote added, please make an issue about it and gain support. If the emote is deemed worthy by the community and approved by BetterYTG admins, it will be added to the extension.
`;

const tableRow = ({code, file}) => `| ![${code}](images/${file}) | \`${code}\` |\n`;

const tableTemplate = (title, emotes) => `
## ${title}
| Emote | Text |
| --- | --- |
${emotes.map(emote => tableRow(emote)).join('')}`;

// ---

const emoteToObj = code => ({ code, file: dictionary[code] });

// ---

const emoteKeys = Object.keys(dictionary);
const sorted = new Map();

const alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');
const numeric = /\d/;
const special = /[^A-Za-z0-9\s]/;

// Special
const specialCharEmotes = emoteKeys
  .filter(code => special.exec(code[0]) !== null)
  .map(emoteToObj);
sorted.set('Special Charcters', specialCharEmotes);

// 0-9
const numericCharEmotes = emoteKeys
.filter(code => numeric.exec(code[0]))
.map(emoteToObj);
sorted.set('0-9', numericCharEmotes);

// A-Z
alpha.forEach(char => {
  const thisCharEmotes = emoteKeys
    .filter(code => code[0].toUpperCase() === char)
    .map(emoteToObj);
  
  if(thisCharEmotes.length > 0) {
    sorted.set(char, thisCharEmotes);
  }
});

sorted.forEach((emotes, title) => {
  MD += tableTemplate(title, emotes);
});

// Write README.md
fs.writeFile('README.md', MD, () => {
  console.log('README.md generated');
});
